.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SNAZZER-SEND-WRAPPER 1"
.TH SNAZZER-SEND-WRAPPER 1 "2016-10-16" "" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
snazzer\-send\-wrapper \- ssh forced command wrapper for snazzer\-receive
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  SSH_ORIGINAL_COMMAND="sudo \-n snazzer \-\-list\-snapshots \*(Aq\-\-all\*(Aq" \e
\&    ./snazzer\-send\-wrapper
\&
\&  SSH_ORIGINAL_COMMAND="sudo \-n grep \-srl \e
\&    \*(Aqsendinghost1\*(Aq \*(Aq/some/.snapshotz/.measurements/\*(Aq" snazzer\-send\-wrapper
\&
\&  SSH_ORIGINAL_COMMAND="sudo \-n btrfs send \e
\&    \*(Aq/some/.snapshotz/2015\-04\-01T000000Z\*(Aq" snazzer\-send\-wrapper
\&
\&  SSH_ORIGINAL_COMMAND="sudo \-n cat \e
\&    \*(Aq/some/.snapshotz/.measurements/2015\-04\-01T000000Z\*(Aq" snazzer\-send\-wrapper
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-help\fR: Brief help message" 4
.IX Item "--help: Brief help message"
.PD 0
.IP "\fB\-\-man\fR: Full documentation" 4
.IX Item "--man: Full documentation"
.IP "\fB\-\-man\-roff\fR: Full documentation as *roff output, Eg:" 4
.IX Item "--man-roff: Full documentation as *roff output, Eg:"
.PD
.Vb 1
\&    snazzer \-\-man\-roff | nroff \-man
.Ve
.IP "\fB\-\-man\-markdown\fR: Full documentation as markdown output, Eg:" 4
.IX Item "--man-markdown: Full documentation as markdown output, Eg:"
.Vb 1
\&    snazzer \-\-man\-markdown > snazzer\-manpage.md
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a wrapper script to be used in place of a real login shell (Eg. as an
\&\fIssh\fR\|(1) forced command) in order to restrict the commands available to the user
account used by \fBsnazzer-receive\fR to run \f(CW\*(C`btrfs send\*(C'\fR. It may be utilized by
adding an entry in the \f(CW\*(C`~/.ssh/authorized_keys\*(C'\fR file on the sending host (Eg.
\&\f(CW\*(C`sendinghost1\*(C'\fR) under the user account used by \fBsnazzer-receive\fR to run
\&\f(CW\*(C`btrfs send\*(C'\fR.  \f(CW\*(C`~/.ssh/authorized_keys\*(C'\fR:
.PP
.Vb 2
\&    command="/usr/bin/snazzer\-send\-wrapper",no\-port\-forwarding, \e
\&        no\-X11\-forwarding,no\-pty ssh\-rsa AAAA...snip...== my key
.Ve
.PP
And then (as an example) receive btrfs snapshots from this \f(CW\*(C`sendinghost1\*(C'\fR:
.PP
.Vb 1
\&    snazzer\-receive sendinghost1 \-\-all
.Ve
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\(bu" 4
\&\s-1SSH_ORIGINAL_COMMAND\s0
.Sp
This variable holds the original remote ssh command to be acted upon.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
.IP "\(bu" 4
This script tries too hard to parse normal shell commands
.Sp
A better design would be custom command tokens issued with more easily parsed
string and argument delimeters. This would require some changes to
\&\fBsnazzer-receive\fR.
.Sp
A mitigating factor is that all commands are executed in the form of:
.Sp
.Vb 1
\&  foo "$@"
.Ve
.Sp
Rather than any variant of the more exciting:
.Sp
.Vb 1
\&  foo $BAREWORD_ARGUMENTS
.Ve
.Sp
or
.Sp
.Vb 1
\&  eval "$SSH_ORIGINAL_COMMAND"
.Ve
.Sp
This wrapper script is also sanity-checked with bats regression tests which
check that only the correct number of arguments, valid arguments, switches,
path patterns and escape characters are dealt with \- anything else is rejected.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
\&\fBsnazzer-send-wrapper\fR will abort with an error message printed to \s-1STDERR\s0 and
non-zero exit status under the following conditions:
.IP "2. the command string was not recognized" 4
.IX Item "2. the command string was not recognized"
.PD 0
.IP "98. the command string was recognized but the arguments were not safe" 4
.IX Item "98. the command string was recognized but the arguments were not safe"
.ie n .IP "99. the command string was recognized and an attempt was made to parse/re\-pack the arguments however the argument string had dangling quotes or otherwise confused the parser/""$@"" unpacker" 4
.el .IP "99. the command string was recognized and an attempt was made to parse/re\-pack the arguments however the argument string had dangling quotes or otherwise confused the parser/``$@'' unpacker" 4
.IX Item "99. the command string was recognized and an attempt was made to parse/re-pack the arguments however the argument string had dangling quotes or otherwise confused the parser/$@ unpacker"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
snazzer-receive
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Harvey <csirac2@gmail.com>, https://github.com/csirac2/snazzer
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2015, Paul Harvey <csirac2@gmail.com> All rights reserved.
.PP
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
.PP
1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
.PP
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.
.PP
\&\s-1THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \*(L"AS IS\*(R" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES \s0(\s-1INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES\s0; \s-1LOSS OF USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT \s0(\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
