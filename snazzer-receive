#!/bin/sh
set -e
SNAZZER_VERSION=0.1
SNAZZER_SUBVOLS_EXCLUDE_FILE_TMP=0

list_snapshots() {
    HOST="$1"
    shift
    ssh "$HOST" "sudo snazzer --list-snapshots $@"
}

build_send_cmd() {
    HOST="$1"
    SUBVOL_PATH=$(echo "$2" | sed "s|'|'\\\\''|g")
    # executed remotely after one round of interpolation, so escape twice:
    SNAP_PATH=$(echo "$3" | sed "s|'|'\\\\''|g" | sed "s|'|'\\\\''|g")
    SNAP_PARENT_PATH=$(echo "$4" | sed "s|'|'\\\\''|g" | sed "s|'|'\\\\''|g" )
    PARENT_SWITCH=""
    if [ -n "$SNAP_PARENT_PATH" ]; then
        PARENT_SWITCH="-p '\\''$SNAP_PARENT_PATH'\\''" 
    fi
    cat <<HERE
sudo mkdir '$SUBVOL_PATH/.snapshotz/current' && \
echo -n "  "
ssh '$HOST' 'sudo btrfs send '\''$SNAP_PATH'\'' $PARENT_SWITCH' 2>/dev/null | \\
    sudo btrfs receive '$SUBVOL_PATH/.snapshotz/current' && \
    sudo btrfs subvolume snapshot -r '$SUBVOL_PATH/.snapshotz/current/'* \
        '$SUBVOL_PATH/.snapshotz/' >/dev/null && \
    sudo btrfs subvolume delete '$SUBVOL_PATH/.snapshotz/current/'* \
        >/dev/null && \
    sudo rmdir '$SUBVOL_PATH/.snapshotz/current'
HERE
}

create_subvol() {
    DIR=$(echo "$1" | sed "s|'|'\\\\''|g")
    PARENT=$(eval "dirname '$DIR'" | sed "s|'|'\\\\''|g")
    if [ "$DIR"!="$PARENT" ]; then
        eval "sudo mkdir -vp '$PARENT'"
    fi
    cat <<HERE | /bin/sh -e
sudo btrfs subvolume create '$DIR' && \
sudo mkdir -vp '$DIR/.snapshotz'
HERE
}

is_subvol() {
    DIR=$(echo "$1" | sed "s|'|'\\\\''|g")

    if [ "$(eval "sudo btrfs subvolume show '$DIR' 2>&1 || echo ERROR" | \
        grep -c '^ERROR' || true)" = "0" ]; then
        echo 1
    else
        echo 0
    fi
}

#SMELL: Assumes --list-snapshots lines are grouped by subvol, ordered by date
#FIXME: Subvols containing mixed timezone snapshots will use suboptimal parents
do_host() {
    HOST="$1"
    # Last snapshot seen in the local target fs (for this subvol)
    PREV_SNAP=
    # PREV_SNAP needs to be reset foreach subvol, so track/detect subvol change
    PREV_SUBVOL=
    NUM_SUBVOL=0
    NUM_SNAP=0
    NUM_RECV=0
    NUM_SKIP=0
    LIST_ERR=$(mktemp)
    DID_THIS_SUBVOL=0 # wouldn't need this if we could persist loop state
    DID_SOME_SUBVOL=0 # wouldn't need this if we could persist loop state
    shift
    eval "list_snapshots '$HOST' $@ 2>'$LIST_ERR' && echo '<<<EOF>>>'" \
        | while read SNAPSHOT
    do
        # SMELL: This is <<EOF>> thing is dumb, working around the while read
        # SNAPSHOT block being unable to persist state in the variables above.
        if [ "$SNAPSHOT" = "<<<EOF>>>" ]; then
            NUM_SUBVOL=$(expr $NUM_SUBVOL + $DID_SOME_SUBVOL)
            echo -n "  $NUM_RECV of $NUM_SNAP snapshots received "
            echo "($NUM_SKIP skipped)"
            echo "Processed $NUM_SUBVOL subvolumes."
            break
        fi
        DID_SOME_SUBVOL=1
        SUBVOL_PATH=$(echo "$SNAPSHOT" | sed 's|^/*\(.*\)/\.snapshotz/.*|\1|g')
        SNAP_PATH=$(echo "$SNAPSHOT" | sed 's|^/||g')
        if [ -z "$SUBVOL_PATH" ]; then
            SUBVOL_PATH="."
        fi
        if [ -z "$PREV_SUBVOL" ]; then
            PREV_SUBVOL="$SUBVOL_PATH"
        elif [ "$PREV_SUBVOL" != "$SUBVOL_PATH" ]; then
            PREV_SNAP=
            echo -n "  $NUM_RECV of $NUM_SNAP snapshots received "
            echo "($NUM_SKIP skipped)"
            NUM_SNAP=0
            NUM_RECV=0
            NUM_SKIP=0
            NUM_SUBVOL=$(expr $NUM_SUBVOL + 1)
            DID_THIS_SUBVOL=0
        fi
        if [ "$DID_THIS_SUBVOL" = "0" ]; then
            DID_THIS_SUBVOL=1
            echo "Working on $SUBVOL_PATH:"
            if [ "$(is_subvol "$SUBVOL_PATH")" != "1" ]; then
                create_subvol "$SUBVOL_PATH"
            fi
            if [ ! -d "$SUBVOL_PATH/.snapshotz" ]; then
                eval "sudo mkdir '$SUBVOL_PATH/.snapshotz'"
            fi
            if [ -d "$SUBVOL_PATH/.snapshotz/current" ]; then
                cat <<HERE >&2

ERROR: $SUBVOL_PATH/.snapshotz/current exists. Another instance is already
running, or a previous invocation was interrupted. If you are sure no other
instances are already running, remove this directory and snapshots under it:

btrfs subvolume delete '$SUBVOL_PATH/.snapshotz/current'/*
rmdir '$SUBVOL_PATH/.snapshotz/current'
HERE
                exit 2
            fi
        fi
        if [ -d "$SNAP_PATH" ]; then
            NUM_SKIP=$(expr $NUM_SKIP + 1)
        else
            NUM_RECV=$(expr $NUM_RECV + 1)
            CMD="/bin/sh -e"
            if [ "$DRY_RUN" != "0" ]; then
                CMD="cat"
            fi
            if [ -z "$PREV_SNAP" ]; then
                build_send_cmd "$HOST" "$SUBVOL_PATH" "/$SNAP_PATH" | $CMD
            else
                build_send_cmd \
                    "$HOST" "$SUBVOL_PATH" "/$SNAP_PATH" "/$PREV_SNAP" | $CMD
            fi
        fi
        NUM_SNAP=$(expr $NUM_SNAP + 1)
        PREV_SNAP="$SNAP_PATH"
        PREV_SUBVOL="$SUBVOL_PATH"
    done
    if [ -s "$LIST_ERR" ]; then
        echo "  ssh $HOST 'snazzer --list-snapshots $@': $(grep . "$LIST_ERR")"
    fi
    rm "$LIST_ERR"
}
DRY_RUN=0

while [ "$(echo "$1" | grep -c "^-")" != 0 ]
do
    case "$1" in
        -h | --help ) pod2usage -exit 0 "$0"; exit ;;
             --man ) pod2usage -exit 0 -verbose 3 "$0"; exit ;;
             --man-roff ) pod2man --release=$SNAZZER_VERSION "$0"; exit ;;
             --man-markdown )
             cat <<HERE | perl -Mstrict
if ( eval { require Pod::Markdown; 1; } ) {
    Pod::Markdown->new->filter('$0');
}
else {
    print STDERR "ERROR: --man-markdown requires Pod::Markdown\n\$@\n";
    exit 9;
}
HERE
                 exit ;;
        -d | --dry-run ) DRY_RUN=1; ;;
        * ) echo "ERROR: Invalid argument '$1'" >&2 ; exit ;;
    esac
    shift
done

if [ -z "$1" -a "$DO_ALL" != "1" ]; then
    pod2usage -exit 0 "$0"
    echo "ERROR: Missing argument" >&2
    exit 1
elif [ "$DO_FORCE" = "1" -a "$DRY_RUN" = "1" ]; then
    pod2usage -exit 0 "$0"
    echo "ERROR: --force and --dry-run are incompatible" >&2
    exit 1
fi

do_host "$@"

exit

__END__
=head1 NAME

snazzer-receive - receive remote snazzer snapshots to current working dir

=head1 SYNOPSIS

  snazzer-receive host [--dry-run] --all [/path/to/btrfs/mountpoint]

  snazzer-receive host [--dry-run] [/remote/subvol1 [/subvol2 [..]]]

=head1 DESCRIPTION

First, B<snazzer-receive> obtains a list of snapshots on the remote host. This
is achieved by processing the first positional argument as an ssh hostname with
which to run C<snazzer --list-snapshots [args]> remotely, where [args] are all
subsequent B<snazzer-receive> arguments (such as C<--all> or
C</remote/subvol1>).

B<snazzer-receive> then iterates through this list of snapshots, recreating a
filesystem similar to that of the remote host's by creating subvolumes and
C<.snapshotz> directories where necessary. Missing snapshots are instantiated
directly with C<btrfs send> and C<btrfs receive>, using C<btrfs send -p [parent]>
where possible to reduce transport overhead of incremental snapshots.

Rather than offer ssh user/port/host specifications through B<snazzer-receive>,
it is assumed all remote hosts are properly configured through your ssh config
file usually at C<$HOME/.ssh/config>.

B<NOTE 1:> B<snazzer-receive> tries to recreate a filesystem similar to that of
the remote host, starting at the current working directory which represents the
root filesystem. If the remote host has a root btrfs filesystem, this means that
the current working directory should itself also be a btrfs subvolume in order
to receive snapshots under ./.snapshotz. However, B<snazzer-receive> will be
unable to replace the current working directory with a btrfs subvolume if it
isn't already one.

Therefore, if required, ensure the current working directory is already a btrfs
subvolume prior to running B<snazzer-receive>.

B<NOTE 2:> C<snazzer-receive host --all> may process a list of snapshots
spanning multiple separate btrfs filesystems on a remote host, but unless extra
steps are taken they will all be received into the same local filesystem under
the current working directory. If this is not what you want, manually mount
filesystems under the current working directory before running
B<snazzer-receive>.

=head1 OPTIONS

=over

=item B<--dry-run>: print rather than execute commands that would be run

=item B<--help>: Brief help message

=item B<--man>: Full documentation

=item B<--man-roff>: Full documentation as *roff output, Eg:

    snazzer --man-roff | nroff -man

=item B<--man-markdown>: Full documentation as markdown output, Eg:

    snazzer --man-markdown > snazzer-manpage.md

=back

=head1 ENVIRONMENT

=over

=back

=head1 BUGS AND LIMITATIONS

=over

=back

=head1 EXIT STATUS

B<snazzer-receive> will abort with an error message printed to STDERR and
non-zero exit status under the following conditions:

=over

=item 1. invalid arguments

=item 2. C<.snapshotz/current> already exists at a given destination subvolume

=item 9. tried to display man page with a formatter which is not installed

=back

=head1 SEE ALSO

snazzer, snazzer-measure, snazzer-prune-candidates

=head1 AUTHOR

Paul Harvey <csirac2@gmail.com>, https://github.com/csirac2/snazzer

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2015, Paul Harvey <csirac2@gmail.com> All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
=cut
