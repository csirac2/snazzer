#!/bin/sh

set -e
SNAZZER_VERSION=0.3

# Keep in sync with the POD!
default_snazzer_sig_func() {
    gpg2 --quiet --no-greeting --batch --use-agent --armor --detach-sign -
}
# Keep in sync with the POD!
if [ -z "$SNAZZER_SIG_ENABLE" ]; then
    SNAZZER_SIG_ENABLE=1
fi
# Keep in sync with the POD!
if [ -z "$SNAZZER_MEASUREMENTS_EXCLUDE_FILE" ]; then
    SNAZZER_MEASUREMENTS_EXCLUDE_FILE=".snapshot_measurements.exclude"
fi

do_snazzer_sig() {
    if type snazzer_sig_func | grep -i function >/dev/null; then
        snazzer_sig_func
    else
        default_snazzer_sig_func
    fi
}

get_date() {
    if [ "$SNAZZER_USE_UTC" = "1" ]; then
        date -u +"%Y-%m-%dT%H%M%SZ"
    else
        date +"%Y-%m-%dT%H%M%S%z"
    fi
}

host_datetime() {
    WHAT=$1
    echo "> on $(hostname) at $(get_date), $WHAT:"
}

build_tar_cmd() {
    DIR_ESC=$(echo "$1" | sed "s|'|'\\\\''|g")

    cat <<CMD
find '$DIR_ESC' -xdev -not -path '$DIR_ESC' -printf './%P\0' | LC_ALL=C sort -z | \
tar -C '$DIR_ESC' --null -T - --no-recursion --preserve-permissions --one-file-system -c \
--to-stdout --exclude-from '$DIR_ESC/$SNAZZER_MEASUREMENTS_EXCLUDE_FILE'
CMD
}

do_tar() {
    DIR=$1

    find "$DIR" -xdev -not -path "$DIR" -printf './%P\0' | LC_ALL=C sort -z | \
tar -C "$DIR" --null -T - --no-recursion --preserve-permissions --one-file-system -c \
--to-stdout --exclude-from "$DIR/$SNAZZER_MEASUREMENTS_EXCLUDE_FILE"
}

measure_sha512sum() {
    DIR=$1

    host_datetime "sha512sum"
    cat <<CMD
($(build_tar_cmd "$DIR") | sha512sum -b)
$(sha512sum -b)
CMD
}

build_du_cmd() {
    DIR_ESC=$(echo "$1" | sed "s|'|'\\\\''|g")
    cat <<CMD
(du -bs --one-file-system --exclude-from '$DIR_ESC/$SNAZZER_MEASUREMENTS_EXCLUDE_FILE' '$DIR_ESC')
CMD
}

do_du() {
    DIR=$1
    du -bs --one-file-system --exclude-from \
        "$DIR/$SNAZZER_MEASUREMENTS_EXCLUDE_FILE" "$DIR"
}

build_find_excl_switch() {
    DIR=$1
    EXCL_FILE="$DIR/$SNAZZER_MEASUREMENTS_EXCLUDE_FILE"

    sed "s/'/'\\\\''/g" "$EXCL_FILE" | while read RULE
    do
        printf " -path '*$RULE' -prune -o"
    done
}

dry_find() {
    DIR_ESC=$(echo "$1" | sed "s|'|'\\\\''|g")
    EXCL=$(build_find_excl_switch "$1")
    cat <<CMD
find '$DIR_ESC' -xdev -not -path '$DIR_ESC' -path '/tmp' -prune -o $EXCL -type f \
    -printf "%T@ './%P'\\\0" | sort -n | tail -1 | cut -f2- -d" " | \
    xargs -0 ls -la --time-style="+%Y-%m-%dT%H%M%S%z"
CMD
}

measure_latest() {
    FIND_CMD=$(dry_find "$1")
    host_datetime "find latest"
    echo "$FIND_CMD"
    echo ""
}

measure_du() {
    DIR=$1
    host_datetime "du bytes"
    build_du_cmd "$DIR"
    do_du "$DIR"
    echo ""
}

measure_tar_info() {
    host_datetime "tar info"
    TAR_VERSION=$(tar --version | head -n 1)
    TAR_DEFAULTS=$(tar --show-defaults)
    echo "$TAR_VERSION $TAR_DEFAULTS"
}

measure_gpg() {
    DIR=$1
    MEAS_FILE=$(basename "$DIR")
    HOST_DATETIME=$(host_datetime "gpg")
    echo "$HOST_DATETIME"
    cat <<CMD
(SIG=\$(mktemp) && cat '$MEAS_FILE' | grep -v '/,/' | sed -n '/$HOST_DATETIME/,/-----END PGP SIGNATURE-----/ { /-----BEGIN PGP SIGNATURE-----/{x;d}; H }; \${x;p}' > \$SIG && $(build_tar_cmd "$DIR") | gpg2 --verify \$SIG -)
CMD
    do_snazzer_sig
    echo ""
}

assert_gpg_secring_excluded() {
    if [ "$(gpg2 --list-secret-keys | wc -l)" = "0" ]; then
        echo "ERROR: no gpg2 --list-secret-keys" >&2
        exit 10
    fi
    N=$(gpg2 --list-secret-keys | grep '^/' | xargs readlink -f | \
        (xargs df -t btrfs 2>/dev/null && echo 1) | wc -l)
    #N=$(gpg2 --list-secret-keys | grep '^/' | xargs readlink -f | \
    #    grep -v -f /etc/snazzer/exclude.patterns | wc -l)
    GPG_SECRING=$(gpg2 --list-secret-keys | head -n 1)

    if [ "$N" -ne 0 ] && ( [ -z "$MY_KEYFILES_ARE_INVINCIBLE" ] || \
        [ "$MY_KEYFILES_ARE_INVINCIBLE" -ne "1" ]); then
        show_usage "\
$N gpg secret key(s) are included in the default snazzer shapshots, including
(perhaps?) $GPG_SECRING!

Move the private keyfiles you wish to use for measurement signing to a subvolume
excluded in /etc/snazzer/exclude.patterns, and ensure that the gpg environment
and config is set correctly. Stubbornly refusing to shoot self in foot; if you
feel this is in error, try again with MY_KEYFILES_ARE_INVINCIBLE=1."
        exit 4
    fi
}

# tar invocation inspired by
# https://wiki.debian.org/ReproducibleBuilds/FileOrderInTarballs
measure() {
    MEAS_DIR=$1
    FAKE_DIR=$2

    if [ -z "$FAKE_DIR" ]; then
        FAKE_DIR="$MEAS_DIR"
    fi
    cat <<HERE
################################################################################
HERE
    measure_du "$FAKE_DIR"
    #measure_latest "$MEAS_DIR"
    # Sometimes, it's mildly faster to run sha512sum and gpg signing in parallel
    # especially on I/O starved VMs.
    if [ "$SNAZZER_SIG_ENABLE" != "0" ]; then
        assert_gpg_secring_excluded
        # Put the fifo somewhere it can't be listed by anyone except us, and
        # especially set permissions so that it can only be read by us.
        TMP_DIR=$(mktemp -d)
        chmod 0700 "$TMP_DIR"
        TMP_FIFO=$(mktemp --tmpdir="$TMP_DIR" -u)
        mkfifo --mode=0700 "$TMP_FIFO"
        SHA512_MEASUREMENT=$(mktemp --tmpdir="$TMP_DIR")
        GPG_MEASUREMENT=$(mktemp --tmpdir="$TMP_DIR")
        (do_tar "$MEAS_DIR") | tee "$TMP_FIFO" | \
            measure_sha512sum "$FAKE_DIR" > "$SHA512_MEASUREMENT" &
        sleep 1 # SMELLLLLL... avoid stupid race condition where it seems that
                # measure_gpg starts before tee does
        measure_gpg "$FAKE_DIR" < "$TMP_FIFO" > "$GPG_MEASUREMENT"
        # And if we put their respective output straight to stdout, we sometimes
        # get their output intermixedue
        cat "$SHA512_MEASUREMENT"
        cat "$GPG_MEASUREMENT"
        rm "$GPG_MEASUREMENT"
        rm "$SHA512_MEASUREMENT"
        rm "$TMP_FIFO"
        rmdir "$TMP_DIR"
    else
        (do_tar "$MEAS_DIR") | measure_sha512sum "$FAKE_DIR"
    fi
    measure_tar_info
}

show_usage() {
    if [ -n "$1" ]; then
        pod2usage -exit 0 "$0" >&2
        printf "\nERROR: %s" "$1" >&2
    else
        pod2usage -exit 0 "$0"
    fi
}

case "$1" in
    -h | --help ) pod2usage -exit 0 "$0"; exit ;;
         --man ) pod2usage -exit 0 -verbose 3 "$0"; exit ;;
         --man-roff ) pod2man --release=$SNAZZER_VERSION "$0"; exit ;;
         --man-markdown )
         cat <<HERE | perl -Mstrict
if ( eval { require Pod::Markdown; 1; } ) {
    Pod::Markdown->new->filter('$0');
}
else {
    print STDERR "ERROR: --man-markdown requires Pod::Markdown\n\$@\n";
    exit 9;
}
HERE
             exit ;;
    -* ) echo "ERROR: Invalid argument '$1'" >&2 ; exit 1 ;;
esac

if [ -z "$1" ]; then
    show_usage "No path specified"
    exit 2
else
    if [ ! -d "$1" ]; then
        echo "ERROR: path '$1' is not a directory" >&2
        exit 3
    else
        measure "$1" "$2"
    fi
fi

exit
__END__
=head1 NAME

snazzer-measure - report shasums & PGP signatures of content under a given path,
along with commands to reproduce or verify data is unchanged

=head1 SYNOPSIS

  snazzer-measure /measured/path [/reported/path] >> path_measurements

=head1 DESCRIPTION

Creates reproducible fingerprints of the given directory, along with commands
necessary (relative to measured path, or if supplied - the optional reported
path) to reproduce the measurement using only standard core GNU userland.

The output includes:

=over

=item * hostname and datetime of B<snazzer-measure> invocation

=item * C<du -bs> (bytes used)

=item * C<sha512sum> of the result of a reproducible tarball of the directory

=item * C<gpg2 --armor --sign> of the same

=item * instructions for reproducing or verifying each of the above

=item * C<tar --version>, C<tar --show-defaults>

=back

=head1 OPTIONS

=over

=item B<--help>: Brief help message

=item B<--man>: Full documentation

=item B<--man-roff>: Full documentation as *roff output, Eg:

    snazzer-measure --man-roff | nroff -man

=item B<--man-markdown>: Full documentation as markdown output, Eg:

    snazzer-measure --man-markdown > snazzer-measure-manpage.md

=back

=head1 ENVIRONMENT

=over

=item * snazzer_sig_func

Function generating PGP SIGNATURE text. Takes input from stdin, output to
stdout. Signatures can be disabled with L<SNAZZER_SIG_ENABLE>. Default:

    snazzer_sig_func() {
        gpg2 --quiet --no-greeting --batch --use-agent --armor --detach-sign -
    }

=item * SNAZZER_SIG_ENABLE

If set to 0, GPG signing is disabled and snazzer_sig_func() is not called.

=item * SNAZZER_MEASUREMENTS_EXCLUDE_FILE

A filename within the measured directory of a newline-separated list of shell
glob patterns to exclude from measurements. Default:

  SNAZZER_MEASUREMENTS_EXCLUDE_FILE=".snapshot_measurements.exclude"

=item * MY_KEYFILES_ARE_INVINCIBLE=1

Skip sanity check/abort when gpg secret key exists on a subvolume included in
default snazzer snapshots

=item * SNAZZER_USE_UTC

Use UTC times of the form C<YYYY-MM-DDTHHMMSSZ> instead of the default local
time+offset C<YYYY-MM-DDTHHMMSS+hhmm>

=back

=head1 EXIT STATUS

B<snazzer-measure> will abort with an error message printed to STDERR and
non-zero exit status under the following conditions:

=over

=item 1. Invalid argument

=item 2. Path string not specified

=item 3. Path string not a directory

=item 4. GPG signature would have been generated with a secret keyfile stored
in a subvolume which has not been excluded from default snazzer snapshots, see
L<IMPORTANT> below

=item 5. Expected the .snazzer_measurements.exclude file to contain an entry
for the .snazzer_measurements file

=back

=head1 IMPORTANT

Please note that if you are using this tool to gain some form of integrity
measurement (Eg. you want to detect tampering), GPG private keys used for the
signing operation mustn't be exposed among the directories being measured.

Put another way: it makes no sense to GPG-sign measurements of a directory if
those very same directories contain the GPG private key material required to
re-sign modifications made by anyone who happens to be looking.

=head1 BUGS AND LIMITATIONS

=over

=item * MY_KEYFILES_ARE_INVINCIBLE

The sanity check for location of GPG secret keyfile may be more annoying than
helpful on installations using smartcards, TPMs, or other methods of protecting
keyfiles - hence the B<MY_KEYFILES_ARE_INVINCIBLE> work-around.

=item * Temporary files

To avoid unnecessary I/O, gpg signing and shasumming are done in parallel from
the same C<tar --to-stdout> pipe; this involves creating a temporary named pipe
which is normally removed at the end of a successful run, but will be left
behind should a failure occur. These are randomly named with C<mktemp> and mode
0700, inside a C<mktemp -d> directory also with 0700 permissions.

=back

=head1 SEE ALSO

snazzer, snazzer-prune-candidates, snazzer-receive

=head1 AUTHOR

Paul Harvey <csirac2@gmail.com>, https://github.com/csirac2/snazzer

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2015, Paul Harvey <csirac2@gmail.com> All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
=cut
